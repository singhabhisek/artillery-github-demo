name: Artillery Test Orchestration   # Workflow name as shown in Actions tab

# Trigger workflow manually via GitHub UI
on:
  workflow_dispatch:
    inputs:
      branch:                         # Git branch to checkout
        description: "Branch to use for the workflow"
        required: true
        default: "main"
      action:                         # Action to perform
        description: "run-tests or clear-artifacts"
        required: true
        type: choice
        options:
          - run-tests
          - clear-artifacts
      run_id:                         # Optional run identifier
        description: "Optional run ID (leave blank for timestamp)"
        required: false
        default: ""
      environment:                    # Test environment
        description: "Environment for tests"
        required: true
        type: choice
        options:
          - dev
          - test
      test_type:                       # Folder under `tests/` (load/stress/smoke)
        description: "Type of test folder to run"
        required: true
        type: choice
        options:
          - load
          - stress
          - smoke
      scripts:                         # Comma-separated YAML scripts
        description: "Comma-separated list of YAML scripts (default=all)"
        required: false
        default: "load_test.yml"
      parallel:                        # Sequential or parallel execution
        description: "Run tests in parallel?"
        required: true
        type: choice
        options:
          - true
          - false
        default: "false"
      vm_instances:                     # Number of parallel VMs if parallel=true
        description: "Number of VM instances for parallel execution"
        required: true
        default: "1"

# Environment variables (not in form, set defaults here)
env:
  ARTILLERY_VERSION: 2.0.21             # Pinned Artillery version for HTML report stability
  RETENTION_DAYS: 7                    # Default retention for artifacts
  INCLUDE_EXTRA: "Y"                   # Include extra files (Y/N) in artifact

# -------------------------------------------------------------
# JOB 1: Setup
# Collect run_id, determine scripts, prepare JSON array for matrix
# -------------------------------------------------------------
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.runid.outputs.run_id }}            # Export run_id to downstream jobs
      scripts_json: ${{ steps.collect.outputs.scripts_json }} # JSON array of scripts for matrix
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}         # Checkout branch selected in form

      - name: Set Run ID
        id: runid
        run: |
          # Determine run_id: use provided value or generate timestamp
          if [ -z "${{ github.event.inputs.run_id }}" ]; then
            RUN_ID=$(date +'%Y%m%d-%H%M%S')             # Format: YYYYMMDD-HHMMSS
          else
            RUN_ID="${{ github.event.inputs.run_id }}"   # Use user-provided run_id
          fi
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT       # Export as output

      - name: Collect YAML Scripts and Prepare JSON Array
        id: collect
        run: |
          # Folder for selected test type
          TEST_DIR="tests/${{ github.event.inputs.test_type }}"
          
          # Determine which scripts to run
          if [ -z "${{ github.event.inputs.scripts }}" ]; then
            # All YAML files in folder
            FILES=$(ls $TEST_DIR/*.yml | xargs -n1 basename | paste -sd "," -)
          else
            # Convert comma-separated input to YAML filenames
            FILES=$(echo "${{ github.event.inputs.scripts }}" | tr ',' '\n' | xargs -I {} basename {}.yml | paste -sd "," -)
          fi
          
          # Convert comma-separated list to JSON array for matrix
          SCRIPTS_JSON=$(echo "[\"${FILES//,/\",\"}\"]")   # ["script1.yml","script2.yml"]
          echo "scripts_json=$SCRIPTS_JSON" >> $GITHUB_OUTPUT

# -------------------------------------------------------------
# JOB 2: Sequential Execution (parallel=false)
# -------------------------------------------------------------
  run-sequential:
    needs: setup
    if: ${{ github.event.inputs.action == 'run-tests' && github.event.inputs.parallel == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18                    # Required by Artillery

      - name: Install Artillery
        run: |
          npm install -g artillery@$ARTILLERY_VERSION  # Pin version to avoid HTML report issues

      - name: Run Tests Sequentially
        run: |
          # Create folder for this run
          mkdir -p reports/${{ needs.setup.outputs.run_id }}
          TEST_DIR="tests/${{ github.event.inputs.test_type }}"

          # Parse JSON array of scripts into bash array using jq
          SCRIPTS=($(echo '${{ needs.setup.outputs.scripts_json }}' | jq -r '.[]'))

          # Loop through scripts sequentially
          for file in "${SCRIPTS[@]}"; do
            NAME=$(basename "$file" .yml)                    # Remove extension
            echo "Running $NAME sequentially"
            # Run Artillery YAML -> JSON
            artillery run --output reports/${{ needs.setup.outputs.run_id }}/${NAME}.json "$TEST_DIR/$file"
            # Convert JSON -> HTML report
            artillery report --output reports/${{ needs.setup.outputs.run_id }}/${NAME}.html reports/${{ needs.setup.outputs.run_id }}/${NAME}.json
          done

      - name: Include Extra Files
        if: ${{ env.INCLUDE_EXTRA == 'Y' }}
        run: |
          mkdir -p reports/${{ needs.setup.outputs.run_id }}/configs
          cp -r tests/${{ github.event.inputs.test_type }}/* reports/${{ needs.setup.outputs.run_id }}/configs/ || true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artillery-${{ github.event.inputs.test_type }}-${{ needs.setup.outputs.run_id }}
          path: reports/${{ needs.setup.outputs.run_id }}
          retention-days: ${{ env.RETENTION_DAYS }}

# -------------------------------------------------------------
# JOB 3: Parallel Execution (matrix)
# -------------------------------------------------------------
  run-parallel:
    needs: setup
    if: ${{ github.event.inputs.action == 'run-tests' && github.event.inputs.parallel == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        script: ${{ fromJSON(needs.setup.outputs.scripts_json) }}   # Each script runs in its own VM
        max-parallel: ${{ github.event.inputs.vm_instances }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Artillery
        run: |
          npm install -g artillery@$ARTILLERY_VERSION

      - name: Run Test in Parallel
        run: |
          mkdir -p reports/${{ needs.setup.outputs.run_id }}
          TEST_DIR="tests/${{ github.event.inputs.test_type }}"
          NAME=$(basename "${{ matrix.script }}" .yml)
          echo "Running $NAME in parallel VM"
          artillery run --output reports/${{ needs.setup.outputs.run_id }}/${NAME}.json "$TEST_DIR/${{ matrix.script }}"
          artillery report --output reports/${{ needs.setup.outputs.run_id }}/${NAME}.html reports/${{ needs.setup.outputs.run_id }}/${NAME}.json

      - name: Include Extra Files
        if: ${{ env.INCLUDE_EXTRA == 'Y' }}
        run: |
          mkdir -p reports/${{ needs.setup.outputs.run_id }}/configs
          cp -r tests/${{ github.event.inputs.test_type }}/* reports/${{ needs.setup.outputs.run_id }}/configs/ || true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artillery-${{ github.event.inputs.test_type }}-${{ needs.setup.outputs.run_id }}
          path: reports/${{ needs.setup.outputs.run_id }}
          retention-days: ${{ env.RETENTION_DAYS }}
