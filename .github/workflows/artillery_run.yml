name: Artillery Test Orchestration   # The name of the workflow as it appears in GitHub Actions tab

# Trigger workflow manually via GitHub UI
on:
  workflow_dispatch:                  # Enables a form to run the workflow manually
    inputs:
      branch:                         # Input variable: Git branch to use for checkout
        description: "Branch to use for the workflow"
        required: true               # Must be provided
        default: "main"             # Default branch if nothing is selected
      action:                         # Input variable: action to perform
        description: "Action to perform"
        required: true
        type: choice
        options:
          - run-tests                # Option to run selected tests
          - clear-artifacts          # Option to remove old artifacts
      run_id:                         # Input variable: optional run identifier
        description: "Optional run ID (leave blank to auto-generate timestamp)"
        required: false              # Can be left blank
        default: ""                  # Blank triggers auto-generation
      environment:                    # Input variable: test environment
        description: "Environment for tests (dev/test)"
        required: true
        type: choice
        options:
          - dev
          - test
      test_type:                       # Input variable: type of test folder to run
        description: "Type of test folder to run (load/stress/smoke)"
        required: true
        type: choice
        options:
          - load
          - stress
      scripts:                         # Input variable: comma-separated list of YAML scripts
        description: "Comma-separated YAML scripts to run (default=all)"
        required: false               # Optional; default runs all scripts in the folder
        default: ""
      parallel:                        # Input variable: flag to enable parallel execution
        description: "Run tests in parallel using matrix? (true/false)"
        required: true
        default: "false"              # Default is sequential execution
      vm_instances:                     # Input variable: number of parallel VMs
        description: "Number of parallel VMs (only used if parallel=true)"
        required: true
        default: "1"
      retention_days:                   # Input variable: artifact retention period
        description: "Retention period for artifacts in days"
        required: true
        default: "7"
      include_extra:                    # Input variable: whether to include extra YAML/data files in artifact
        description: "Include extra files (Y/N) with artifacts?"
        required: true
        default: "Y"
      artillery_version:                # Input variable: Artillery version to install
        description: "Artillery version to install (ensures HTML report works)"
        required: false
        default: "2.1.1"

# -----------------------------------------------------
# JOB 1: Setup
# Collect run_id, determine which scripts to run, prepare JSON array for matrix
# -----------------------------------------------------
jobs:
  setup:
    runs-on: ubuntu-latest                 # Runs this job on a standard Ubuntu VM
    outputs:                               # Outputs from this job that can be used in downstream jobs
      run_id: ${{ steps.runid.outputs.run_id }}          # Output: run identifier
      scripts_json: ${{ steps.collect.outputs.scripts_json }}  # Output: JSON array of scripts for matrix
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}  # Checkout the branch selected by user

      - name: Set Run ID
        id: runid
        run: |
          # Check if user provided a run_id
          if [ -z "${{ github.event.inputs.run_id }}" ]; then
            # Auto-generate run_id using timestamp if not provided
            RUN_ID=$(date +'%Y%m%d-%H%M%S')
          else
            RUN_ID="${{ github.event.inputs.run_id }}"  # Use provided run_id
          fi
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT    # Export run_id to be used by other jobs

      - name: Collect YAML Scripts and Prepare JSON Array
        id: collect
        run: |
          TEST_DIR="tests/${{ github.event.inputs.test_type }}"  # Folder containing selected test type
          
          if [ -z "${{ github.event.inputs.scripts }}" ]; then
            # If no scripts specified, include all YAML files in folder
            FILES=$(ls $TEST_DIR/*.yml | xargs -n1 basename | paste -sd "," -)
          else
            # Convert comma-separated list from input into basenames of YAML files
            FILES=$(echo "${{ github.event.inputs.scripts }}" | tr ',' '\n' | xargs -I {} basename {}.yml | paste -sd "," -)
          fi
          
          # Convert comma-separated list to JSON array format for matrix
          SCRIPTS_JSON=$(echo "[\"${FILES//,/\",\"}\"]")  # Example: ["load_test.yml","home_page.yml"]
          echo "scripts_json=$SCRIPTS_JSON" >> $GITHUB_OUTPUT  # Export JSON array

# -----------------------------------------------------
# JOB 2: Sequential Execution (parallel=false)
# -----------------------------------------------------
  run-sequential:
    needs: setup   # Depends on setup job
    if: ${{ github.event.inputs.action == 'run-tests' && github.event.inputs.parallel == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18  # Node.js version for Artillery

      - name: Install Artillery
        run: |
          # Install pinned version of Artillery to avoid HTML report breaking
          npm install -g artillery@${{ github.event.inputs.artillery_version }}

      - name: Run Tests Sequentially
        run: |
          mkdir -p reports/${{ needs.setup.outputs.run_id }}  # Create folder for reports
          TEST_DIR="tests/${{ github.event.inputs.test_type }}"

          # Loop over all scripts
          for file in ${{ needs.setup.outputs.scripts_json//[\[\]\"]}}; do
            NAME=$(basename "$file" .yml)  # Extract filename without extension
            echo "Running $NAME sequentially"
            artillery run --output reports/${{ needs.setup.outputs.run_id }}/${NAME}.json "$TEST_DIR/$file"
            artillery report --output reports/${{ needs.setup.outputs.run_id }}/${NAME}.html reports/${{ needs.setup.outputs.run_id }}/${NAME}.json
          done

      - name: Include Extra Files
        if: ${{ github.event.inputs.include_extra == 'Y' }}  # Only copy extra files if flag is Y
        run: |
          mkdir -p reports/${{ needs.setup.outputs.run_id }}/configs
          cp -r tests/${{ github.event.inputs.test_type }}/* reports/${{ needs.setup.outputs.run_id }}/configs/ || true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artillery-${{ github.event.inputs.test_type }}-${{ needs.setup.outputs.run_id }}
          path: reports/${{ needs.setup.outputs.run_id }}
          retention-days: ${{ github.event.inputs.retention_days }}

# -----------------------------------------------------
# JOB 3: Parallel Execution (matrix)
# -----------------------------------------------------
  run-parallel:
    needs: setup
    if: ${{ github.event.inputs.action == 'run-tests' && github.event.inputs.parallel == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        script: ${{ fromJSON(needs.setup.outputs.scripts_json) }}  # Each element runs in its own VM
        max-parallel: ${{ github.event.inputs.vm_instances }}      # Maximum parallel VMs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Artillery
        run: |
          npm install -g artillery@${{ github.event.inputs.artillery_version }}

      - name: Run Test in Parallel
        run: |
          mkdir -p reports/${{ needs.setup.outputs.run_id }}  # Create folder for results
          TEST_DIR="tests/${{ github.event.inputs.test_type }}"
          NAME=$(basename "${{ matrix.script }}" .yml)  # Extract name without extension
          echo "Running $NAME in parallel VM"
          artillery run --output reports/${{ needs.setup.outputs.run_id }}/${NAME}.json "$TEST_DIR/${{ matrix.script }}"
          artillery report --output reports/${{ needs.setup.outputs.run_id }}/${NAME}.html reports/${{ needs.setup.outputs.run_id }}/${NAME}.json

      - name: Include Extra Files
        if: ${{ github.event.inputs.include_extra == 'Y' }}
        run: |
          mkdir -p reports/${{ needs.setup.outputs.run_id }}/configs
          cp -r tests/${{ github.event.inputs.test_type }}/* reports/${{ needs.setup.outputs.run_id }}/configs/ || true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artillery-${{ github.event.inputs.test_type }}-${{ needs.setup.outputs.run_id }}
          path: reports/${{ needs.setup.outputs.run_id }}
          retention-days: ${{ github.event.inputs.retention_days }}
